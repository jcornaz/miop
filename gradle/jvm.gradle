apply plugin: 'kotlin-platform-jvm'
apply plugin: 'java-library'

dependencies {
    api "org.jetbrains.kotlin:kotlin-stdlib:${Version.KOTLIN}"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:${Version.COROUTINES}"

    implementation "org.jetbrains.kotlin:kotlin-reflect:${Version.KOTLIN}"

    testCompile "junit:junit:${Version.JUNIT}"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:${Version.KOTLIN}"
    testCompile "org.jetbrains.kotlin:kotlin-test:${Version.KOTLIN}"
    testCompile "com.nhaarman.mockitokotlin2:mockito-kotlin:${Version.MOCKITO_KOTLIN}"
    testCompile "org.mockito:mockito-core:${Version.MOCKITO}"
    testCompile "org.amshove.kluent:kluent:${Version.KLUENT}"
}

test {
    testLogging {
        events "skipped", "failed"
        showStandardStreams = true
        exceptionFormat = 'full'

        afterSuite { desc, result ->
            if (!desc.parent) {
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs += [
                '-Xuse-experimental=kotlin.Experimental'
        ]
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs += [
                '-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi',
                '-Xuse-experimental=kotlinx.coroutines.ObsoleteCoroutinesApi'
        ]
    }
}
